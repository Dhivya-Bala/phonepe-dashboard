import os
import json
import pandas as pd
import streamlit as st
import plotly.express as px
import requests

# --- Streamlit Page Config ---
st.set_page_config(page_title="üìç PhonePe Transactions - India Map", layout="wide")
st.title("üìç PhonePe Transactions - India Map")

# ==========================
# 1Ô∏è‚É£ Load and Process Data
# ==========================
path = r"C:\Users\DhivyaBharthi\Desktop\GUVI\Phonepay\data\aggregated\transaction\country\india\state"

Agg_state_list = os.listdir(path)

Trans = {
    'State': [], 'Year': [], 'Quarter': [],
    'Transaction_type': [], 'Transaction_count': [], 'Transaction_amount': []
}

for i in Agg_state_list:
    p_i = os.path.join(path, i)
    if not os.path.isdir(p_i):
        continue

    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = os.path.join(p_i, j)
        if not os.path.isdir(p_j):
            continue

        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = os.path.join(p_j, k)
            if not os.path.isfile(p_k):
                continue

            with open(p_k, 'r') as Data:
                try:
                    D = json.load(Data)
                    if D.get('data') and isinstance(D['data'], dict) and 'transactionData' in D['data']:
                        for z in D['data']['transactionData']:
                            name = z['name']
                            count = z['paymentInstruments'][0]['count']
                            amount = z['paymentInstruments'][0]['amount']
                            Trans['Transaction_type'].append(name)
                            Trans['Transaction_count'].append(count)
                            Trans['Transaction_amount'].append(amount)
                            Trans['State'].append(i)
                            Trans['Year'].append(j)
                            Trans['Quarter'].append(int(k.strip('.json')))
                except Exception as e:
                    print(f"Error loading {p_k}: {e}")

Agg_Trans = pd.DataFrame(Trans)

# ==========================
# 2Ô∏è‚É£ State Name Formatting
# ==========================
# Match state names in GeoJSON
state_mapping = {
    'andaman-&-nicobar-islands': 'Andaman & Nicobar Island',
    'andhra-pradesh': 'Andhra Pradesh',
    'arunachal-pradesh': 'Arunanchal Pradesh',
    'assam': 'Assam',
    'bihar': 'Bihar',
    'chandigarh': 'Chandigarh',
    'chhattisgarh': 'Chhattisgarh',
    'dadra-&-nagar-haveli-&-daman-&-diu': 'Dadra & Nagar Haveli & Daman & Diu',
    'delhi': 'NCT of Delhi',
    'goa': 'Goa',
    'gujarat': 'Gujarat',
    'haryana': 'Haryana',
    'himachal-pradesh': 'Himachal Pradesh',
    'jammu-&-kashmir': 'Jammu & Kashmir',
    'jharkhand': 'Jharkhand',
    'karnataka': 'Karnataka',
    'kerala': 'Kerala',
    'ladakh': 'Ladakh',
    'lakshadweep': 'Lakshadweep',
    'madhya-pradesh': 'Madhya Pradesh',
    'maharashtra': 'Maharashtra',
    'manipur': 'Manipur',
    'meghalaya': 'Meghalaya',
    'mizoram': 'Mizoram',
    'nagaland': 'Nagaland',
    'odisha': 'Odisha',
    'puducherry': 'Puducherry',
    'punjab': 'Punjab',
    'rajasthan': 'Rajasthan',
    'sikkim': 'Sikkim',
    'tamil-nadu': 'Tamil Nadu',
    'telangana': 'Telangana',
    'tripura': 'Tripura',
    'uttar-pradesh': 'Uttar Pradesh',
    'uttarakhand': 'Uttarakhand',
    'west-bengal': 'West Bengal'
}

Agg_Trans['State'] = Agg_Trans['State'].map(state_mapping)

# ==========================
# 3Ô∏è‚É£ Aggregating Data for Map
# ==========================
# Example: Sum transaction amount for 2020 Q1
year = st.selectbox("Select Year", sorted(Agg_Trans["Year"].unique()))
quarter = st.selectbox("Select Quarter", sorted(Agg_Trans["Quarter"].unique()))

map_df = Agg_Trans[(Agg_Trans["Year"] == year) & (Agg_Trans["Quarter"] == quarter)]
map_df = map_df.groupby("State", as_index=False)["Transaction_amount"].sum()

# ==========================
# 4Ô∏è‚É£ Load GeoJSON
# ==========================
geojson_url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
geojson_data = requests.get(geojson_url).json()

# ==========================
# 5Ô∏è‚É£ Plot Choropleth Map
# ==========================
fig = px.choropleth(
    map_df,
    geojson=geojson_data,
    featureidkey='properties.ST_NM',
    locations='State',
    color='Transaction_amount',
    color_continuous_scale='Viridis',
    title=f"Total Transaction Amount - {year} Q{quarter}"
)

fig.update_geos(fitbounds="locations", visible=False)
st.plotly_chart(fig, use_container_width=True)




===========================================================

# ---------- DATABASE CONNECTION ----------
def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="12345",
        database="Phonepay_DB"
    )


# ---------- CONFIG ----------
st.set_page_config(page_title="üì± PhonePe Dashboard", layout="wide")
st.title("üì± PhonePe Dashboard")

# ---------- SIDEBAR NAVIGATION ----------
st.sidebar.title("üìë Navigation")
page = st.sidebar.radio(
    "Choose a Case Study and PhonePe India Map",
    [
        "Phonepe Map: India Top_Transactions",
        "Case Study 1: Aggregated Transactions",
        "Case Study 2: Insurance Transactions",
        "Case Study 3: State & District Analysis",
        "Case Study 4: Insurance Analysis",
        "Case Study 5: Device Usage & Engagement"
    ]
)

# ---------- PAGE 1: PHONEPE MAP ----------
if page == "Phonepe Map: India Top_Transactions":
    st.title("üìç PhonePe India Transaction Map")

    # Load GeoJSON
    geojson_url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
    india_states_geojson = requests.get(geojson_url).json()

    # Query
    connection = get_connection()
    query = """
        SELECT State, SUM(District_Amount) AS Total_Amount
        FROM top_transactions
        GROUP BY State
    """
    df = pd.read_sql(query, connection)
    connection.close()

    df['State'] = df['State'].str.title()

    # Plot
    fig = px.choropleth(
        df,
        geojson=india_states_geojson,
        featureidkey='properties.ST_NM',
        locations='State',
        color='Total_Amount',
        color_continuous_scale='ice',
        title="üìä State-wise Transaction Amount"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

# ---------- PAGE 2: CASE STUDY 1 ----------
elif page == "Case Study 1: Aggregated Transactions":
    st.title("üìä PhonePe Transaction Case Study 1")

    # Filters
    st.sidebar.header("üìÖ Filter Options")
    years = list(range(2018, 2024))
    quarters = [1, 2, 3, 4]
    selected_year = st.sidebar.selectbox("Select Year", years)
    selected_quarter = st.sidebar.selectbox("Select Quarter", quarters)

    # Query
    connection = get_connection()
    query1 = f"""
        SELECT State, Year, Quarter, SUM(Transaction_amount) AS Total_Amount
        FROM agg_transaction
        WHERE Year = {selected_year} AND Quarter = {selected_quarter}
        GROUP BY State, Year, Quarter
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df1 = pd.read_sql(query1, connection)
    connection.close()

    st.subheader("üîù Top 10 States by Transaction Amount")
    st.dataframe(df1)
    st.bar_chart(df1.set_index("State")["Total_Amount"])

# ---------- PAGE 3: CASE STUDY 2 ----------
elif page == "Case Study 2: Insurance Transactions":
    st.title("üíº Case Study 2: Insurance Transactions")

    # Filters
    st.sidebar.header("üìÖ Filter Options")
    years = list(range(2018, 2024))
    quarters = [1, 2, 3, 4]
    selected_year = st.sidebar.selectbox("Select Year", years)
    selected_quarter = st.sidebar.selectbox("Select Quarter", quarters)

    # Query
    connection = get_connection()
    query2 = """
        SELECT State, SUM(User_count) AS Total_Users, SUM(User_amount) AS Total_Amount
        FROM map_transaction
        GROUP BY State
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df2 = pd.read_sql(query2, connection)
    connection.close()

    fig_year = px.bar(
        df2,
        x="State",
        y="Total_Amount",
        text="Total_Users",
        title="Year-wise Insurance Uptake (Top 10 States)"
    )
    st.plotly_chart(fig_year, use_container_width=True)

# ---------- PAGE 4: CASE STUDY 3 ----------
elif page == "Case Study 3: State & District Analysis":
    st.title("üåç Case Study 3: State & District Analysis")

    # Query
    connection = get_connection()
    query3 = """
        SELECT State, District, SUM(User_count) AS Total_Users, SUM(User_amount) AS Total_Amount
        FROM map_transaction
        GROUP BY State, District
        ORDER BY Total_Users DESC
        LIMIT 10
    """
    df3 = pd.read_sql(query3, connection)
    connection.close()

    fig = px.bar(df3, x="District", y="Total_Users", color="State", title="Top 10 Districts by User Count")
    st.plotly_chart(fig, use_container_width=True)

# ---------- PAGE 5: CASE STUDY 4 ----------
elif page == "Case Study 4: Insurance Analysis":
    st.title("üìâ Case Study 4: Insurance Analysis")

    connection = get_connection()
    query4 = """
        SELECT State, SUM(User_amount) AS Total_Amount, SUM(User_count) AS Total_Users
        FROM map_insurance
        GROUP BY State
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df4 = pd.read_sql(query4, connection)
    connection.close()

    fig = px.bar(df4, x='State', y='Total_Amount', color='Total_Amount',
                 title="Top States by Insurance Amount", height=500)
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df4)

# ---------- PAGE 6: CASE STUDY 5 ----------
elif page == "Case Study 5: Device Usage & Engagement":
    st.title("üì± Case Study 5: Device Usage & Engagement")

    connection = get_connection()
    query5 = """
        SELECT State, Brand_type, Registered_count, Percentage_Userdevices
        FROM agg_user
        WHERE Registered_count > 1000 
        AND Percentage_Userdevices < 0.1
        ORDER BY Percentage_Userdevices ASC
        LIMIT 10
    """
    df5 = pd.read_sql(query5, connection)
    connection.close()

    fig1 = px.bar(df5, x="Brand_type", y="Percentage_Userdevices", 
                  color="State", title="Underutilized Brands by % of User Devices")
    st.plotly_chart(fig1, use_container_width=True)
    st.dataframe(df5)
